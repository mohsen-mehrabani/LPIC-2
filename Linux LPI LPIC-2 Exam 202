Linux LPI LPIC-2 Exam 202

01. Introduction

02. DNS Server Options
  nslookup host dig dig @server site (without www)
  
  DNS
    1. djbdns 
         Daniel J Bernstein
         Abandonded in 2001
         Forked now
         used in Debian dbndns
         separate components tinydns
       
    2. powerdns
        modular
        front end
        vary
        back end varies
    3. dnsmasq
        small
        simple
        forwarder
        dns tftp dhcp
        
     BIND the importat dns for linux
     
03. Caching Nameserver with BIND
  1. Forwarding dns
  2. Caching DNS
  apt install bind9
  /etc/bind/
  /etc/bind/named.conf.options ---> add recursion yes; (It's necessary for running rndc and without that the named service won't run)
  
  
04. Creating and Maintaining DNS Zones with BIND 
  1. edit /etc/bind/named.conf.local  --> add zone & reverse zone
  2. create zones in /etc/bind/
    you can copy a db. file and rename it for both zone and reverse zones
    (Do Not Forget remane the serial)
    rndc reload for rloading the configurations
    test whith dig @localhost .... and dig @localhost -x .. for reverse dns
    

05. DNS Master and Slave with BIND
  1. /etc/bind/named.conf.local --->
    add:
          allow-transfer { salve's IP; };
          
  2. in salve:
          check the firewall to transfer the dns traffic (port 53)
          centos 6 --> system-config-firewall-tui(test user interface)
          centos 8 --> firewall has GUI & firewalld
          install bind
          /etc/named.conf -->
            listen-on port { any;}
            allow-query { any;}
            add zone whith slave type and masters { master's IP;}; file "zone db.file"
            start service named
            
            
06. Securing BIND Server

  /etc/bind/  -->
   1. dnssec-keygen -a(algorithm) HMAC-MD5 -b(size) size -n(name) name -r(randomdev) /dev/urandom keyname
       notes:
            RSASHA1 will be used by default
            HMAC keys must be between 1 and 512 bits.
            -n nametype
              Specifies the owner type of the key. The value of nametype must either be ZONE (for a DNSSEC zone key (KEY/DNSKEY)),
              HOST or ENTITY (for a key associated with a host (KEY)), USER (for a key associated with a user(KEY)) or OTHER (DNSKEY).
              These values are case insensitive. Defaults to ZONE for DNSKEY generation.
   2. It'll create 2 keys, Kkeyname.key & Kkeyname.private. Copy Key in .private for the next.
   3. create named.cong.tsig -->
        key "keyname" {
                        algorithm HMAC-MD5;
                        secret "the sercret key";
                        };
   4. add in named.conf --> include "/etc/bind/named.conf.tsig";
   5. named.conf.local --> edit allow-transfer { key "keyname"; };
   6. reload rndc

   On other server:
   1. centos: /etc/named.conf --> add
        key "keyname" {
            algorthm HMAC-MD5;
            secret "key";
            };
   2. server IP/hostname {
            key { keyname; };
            };
   3. service named restart

07.  Split DNS with BIND
  1. Edit /etc/bind/named.conf.local 
      add new zone
  2. Create new db. for the new zone
  3. rndc  restart
    It was really easy, I know
            
08. Running BIND in a Chroot Jail 
	In centos it is very easy 
		yum install bind-chroot
		/etc/sysconfig
		cat named
		/var/named/chroot
			
	In ubuntu you should configure it in APP Armor
		/etc/default/bind9 add -t /var/named/chroot to options
		mkdir -p /var/named/chroot
		go to the /var/named/chroot directory
		mkdir etc
		mkdir dev


09. Apache Web Server Installation and Setup 		
				
    package name 		redhat/centos		ubuntu/debian
          httpd			apache2
    config location	/etc/httpd/		/etc/apache2

  Ubuntu/Debian

    /etc/apache2/	apache2.conf	1.sites-enabled
            2.mods-enabled						

            1.sites-available
            2.mods-available

    httpd.conf		conf.d

    apt install apache2
      /var/www/html/index.html

  Cenos/Redhat

    yum install httpd
    default configuration file:/etc/httpd/conf/httpd.conf
    additional configuration files: /etc/httpd/conf.d
    /var/www/html/index.html which does not exist index.html by default

10. Apache Modules & Languages 

	For adding apache2's modules to ubuntu(php e.g.):
		apt-cache search php | grep apache
		find the pachage and install it
		apt-get install libapache2-mod-php5
		/etc/apache2/
		ls mods-available --> you'll find php5.conf & load 
		ls -l mods-available --> findig the symbolinc links


11. Apache MPM Module (Multi-Process Modules)
	1. Prefork (compatible, RAM consuming, needs for modules like PHP)
	2. Worker (use threads, each childs has its children, memory efficient)
	3. Event (newer, uses threads, handles different types of connections differently)
	
	configuration files:
		/etc/apache2/mods-enabled/
		  mpm_prefork.conf
	
	
12. Apache Authentication and Redirection
	separate from system auth 
	e.g. username=test pass=Aa123qwe
	1./etc/apache2/sites-enabled/000-default.conf -->
		<Directory "/var/www/html/secret">
			AuthType Basic
			AuthName "the user name is test"
			AuthUserFile /etc/apache2/testpass
			Require valid-user
		</Directory>
	2.apt-get install apache2-utils
	3.htpasswd -c /etc/apache2/testpass test 
		It'll create the testpass file
	4.apache2ctl restart or systemctl restart apache2
	5.prepare the index.html file in /var/www/html/secret and policy
	6./etc/apache2/sites-enabled/000-default.conf --> remove Directory -->
		Redirect /secret /policy

13. Apache Virtual Host Configuration
	1. Create an virtual IP --> ipconfig eth0:0 192.168.43.220
	2. Create two .conf files for IP and name
	3. Create their directories in /var/www/test1 & test2
	3. edit /etc/apache2/sites-available/000-default.conf as ip.conf and name.conf	
		ip.conf --> 
			1. <VirtualHost 192.168.43.220:80>
			2. ServerName test1
			3. DocumentRoot /var/www/test1

			
		name.conf-->
			1. ServerName test2
			2. DocumentRoot /var/www/test2
	
	4. For enabling these .conf files you can create two symbol links or
	    use a2ensite ip and a2ensite name
	5. if you cannot find the http://test2 add it is /etc/hosts
		
		
		
14. Apache SSL Setup
	ssl: secure socket layer  
	https: secure hyper text transfer protocol
	cert file types:
		1. Private key (never ever share private key)
		2. Signed Public key 
		3. CAS intermediate 	
	In ubuntu it is installed by default
	In centos:
		yum search apache | grep ssl
		mod_ssl.x86_64
		config file -->
			/etc/httpd/conf.d/ssl.conf
				**important notes**
					1.SSLEngine on
					2.SSLcertificateFile
					3.SSLCertificateKeyFile
					4.produce our key and replace int the path
						openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/httpd/myprivatekey.key
						 -out /etc/httpd/mypubliccert.crt
					5. replace the path of these files in nuber 3 & 4
					6. /var/www/html   --> index.html
					7. open the browser enjoy https://localhost
        

15. Squid Installation
	apt-get install squid3
		search for chace_mem
		search cache_dir
		retsart squid
		squid proxy port 3128 
		sudo wondershaper eth0 1024 1024 for creating bottleneck
		
  
16. Squid ACLs
	/etc/squid/squid.conf
	ACL Elements
	Access Lists


17. Squid Authentication
	
	** Auth_param basic program /apt/squid/ncsa /etc/squid/passwd **
	At the end of the TAG: auth_param in squid.conf add:
		auth_param basic program /usr/lib/squid3/basic_ncsa_auth /etc/squid/passwords
			you can find its location with locate command
		A the acl section add --> acl AUTHENTICATED proxy_auth REQUIRED
		Use this like an acl
		save the file
	htpasswd -c /etc/squid3(in my case squid)/passswords mypass ...
	restart squid

18. Nginx Installation and Configuration
	apt install nginx
	/etc/nginx/nginx.conf
	/usr/share/nginx/html by default 


19. Nginx Reverse Proxy
	look like Microsoft Threat Management Gateway (TMG)
	/etc/nginx/sites-available/--> vim search.local
		server {
			listen 80;
			server_name search.local;
			
			location / {
			proxy_pass http://www.msn.com;
			include /etc/nginx/proxy_params;
			}
			
		}
	
	/etc/nginx/sites-enabled -->
		ln -s ../sites-available/search.local .
	
	restart nginx
